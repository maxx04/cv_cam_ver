#pragma once
#include "opencv2/opencv.hpp"

using namespace cv;
using namespace std;


#define SENSOR_RADIUS 15.0f
#define SENSOR_ANGLE_STEP 4.0f
#define POINTS_IN_CIRCLE (int(360.0f/SENSOR_ANGLE_STEP)) //HACK variable hinzufügen
#define MAX_SECTORS 8



class m_sensor
{	

	struct Sector
	{
		uint8_t start;
		uint8_t end;
		Pixel color;
		//ushort distance;
	};

	const enum color_distance_enum {
		RGB_DISTANCE = 0,
		RGB_SQUARE,
		RGB_3SUM,
		RGB_EACH_COLOR
	};

	Point pos;	// position Mitte
	uint size;	// groesse 
	short values[POINTS_IN_CIRCLE];
	//Pixel P1;
	//Pixel P2;

	static uint index[POINTS_IN_CIRCLE];
	static int8_t dx[POINTS_IN_CIRCLE];
	static int8_t dy[POINTS_IN_CIRCLE];
	static Mat out;
	static uint sensors_number;

	ushort sectors_nmb = 0;
	Sector sectors[MAX_SECTORS];

public:
	list<ushort> nighbors; //HACK umbauen in private member
	vector<Point> key_points;


	m_sensor(Point p, uint sz);
	~m_sensor();
	Pixel middle_color(Pixel PA, Pixel PB);
	void check(const Mat* input, int pegel);
	void search_sectors(Pixel next_pixel, int pegel);
	Point get_position();
	Size get_size();
	inline short get_next_ring_value(ushort index, int8_t versatz);
	short color_distance(Pixel Pixel0, Pixel Pixel1, int8_t function_nr);
	void smooth_values( uint8_t range);
	void show(const Mat * input, uint magnify);
	void show(const Mat * input, const String fenster);
	void plot_graph(const String fenster);
	void add_points(vector<Point> * global_points);
	bool cross(Point left_upper_pos);
	ushort get_distance_to_middle(int x, int y);
	Pixel get_color(int x, int y, const Mat * input);
	void m_sensor::mark_global(const Mat * input); //HACK check fuer bildgroesse 
	void soi(const Mat* src, Mat* dst, uint magnify);

};


