#include "stdafx.h"
#include "m_sensor.h"


uint m_sensor::index[POINTS_IN_CIRCLE];
int8_t m_sensor::dx[POINTS_IN_CIRCLE];
int8_t m_sensor::dy[POINTS_IN_CIRCLE];

uint m_sensor::sensors_number = 0;

Mat m_sensor::out;


m_sensor::m_sensor(Point p, uint sz)
{
	assert(sz > 24 && sz < 120); // muss groesser sein um linie zu finden

	pos = p;
	size = sz;

	sectors_nmb = 0;

	float radius = SENSOR_RADIUS;

	sensors_number++;

	int bytes = sizeof(Pixel);

	if (sensors_number < 2) //nur bei erstem sensor alles berechnen
	{

		float da = 0.0f;

		for (ushort number = 0; number < POINTS_IN_CIRCLE; number++)
		{
			dx[number] = (int8_t)(radius * cos(3.1415f * da / 180.0f)); //HACK genauigkeit erhoehen pi double
			dy[number] = (int8_t)(radius * sin(3.1415f * da / 180.0f));

			int offset = (size + 1) * (size / 2); //sensor mitte

			index[number] = (dy[number] * size + dx[number] + offset); //HACK von Pixellaenge abhaengig

			da += SENSOR_ANGLE_STEP;
		}

	}


}

m_sensor::~m_sensor()
{

}

Pixel m_sensor::middle_color(Pixel PA, Pixel PB)
{
	Pixel tmp;

	//tmp = PA / 2 + PB / 2;

	tmp.x = (PA.x + PB.x) / 2;
	tmp.y = (PA.y + PB.y) / 2;
	tmp.z = (PA.z + PB.z) / 2;

	return tmp;
}

void m_sensor::check(const Mat * input, int pegel)
{

	Rect roi(pos.x, pos.y, size, size);

	(*input)(roi).copyTo(out);

	Pixel* pixelPtr = (Pixel*)out.data; 

	Pixel Pixel0 = *(pixelPtr + index[POINTS_IN_CIRCLE - 1]);
	Pixel Pixel1;

	sectors_nmb = 0; //start fuer find sectors

	search_sectors(Pixel0, pegel);

	for (int i = 0; i < POINTS_IN_CIRCLE; i += 1)
	{
		Pixel1 = *(pixelPtr + index[i]);

		values[i] = color_distance(Pixel0, Pixel1, RGB_EACH_COLOR);

		search_sectors(Pixel1, pegel);

		Pixel0 = Pixel1;
	}

	// Glaetten
	smooth_values(3);

	key_points.clear();

	for (int n = 0; n < POINTS_IN_CIRCLE; n += 1)
	{

		if (abs(values[n]) > pegel)
			key_points.push_back(Point(size / 2 + dx[n], size / 2 + dy[n]));
	}

	//imshow("farb", out);
}

void m_sensor::search_sectors(Pixel next_pixel, int pegel)
{
	//HACK bei auswertung vergleich end ring - startring beachten

	//assert(sectors_nmb < MAX_SECTORS);

	if (sectors_nmb >= MAX_SECTORS)	return;

	//if (sectors_nmb = MAX_SECTORS)
	//{
	//	//distance berechnen
	//	return;
	//}

	// start wenn:
	if (sectors_nmb == 0)
	{
		
		sectors[sectors_nmb].color = next_pixel;
		sectors[sectors_nmb].start = 0;
		sectors[sectors_nmb].end = 0;
		//sectors[sectors_nmb].distance = 0;
		sectors_nmb++;

		return;
	}

	Pixel p = sectors[sectors_nmb - 1].color;

	if (color_distance(p, next_pixel, RGB_EACH_COLOR) < pegel)
	{
		sectors[sectors_nmb - 1].color = middle_color(p, next_pixel);
		sectors[sectors_nmb - 1].end++;
	}
	else
	{
		//Wenn Laenge vom Sektor kleiner als 3 verwerfen.
		if (sectors[sectors_nmb - 1].end - sectors[sectors_nmb - 1].start < 3)
		{
			//setzen aktuelle farbe 
			sectors[sectors_nmb - 1].color = next_pixel;
			//setzen start und end
			sectors[sectors_nmb - 1].start = sectors[sectors_nmb - 1].end;
			sectors[sectors_nmb - 1].end = sectors[sectors_nmb - 1].end;

		}
		else
		{
			sectors[sectors_nmb].color = next_pixel;
			sectors[sectors_nmb].start = sectors[sectors_nmb - 1].end;
			sectors[sectors_nmb].end = sectors[sectors_nmb - 1].end;
			sectors_nmb++;
		}
	}

}

inline short m_sensor::color_distance(Pixel Pixel0, Pixel Pixel1, int8_t function_nr)
{
	switch (function_nr)
	{
	case RGB_SQUARE:
		return (Pixel0.x - Pixel1.x) ^ 2 + (Pixel0.y - Pixel1.y) ^ 2 + (Pixel0.z - Pixel1.z) ^ 2;

	case RGB_3SUM:
		return abs(((Pixel0.x + Pixel0.y + Pixel0.z) - (Pixel1.x + Pixel1.y + Pixel1.z))^2 / 3);

	case RGB_EACH_COLOR:
		return abs(Pixel0.x - Pixel1.x) + abs(Pixel0.y - Pixel1.y) + abs(Pixel0.z - Pixel1.z);

	default:
		return abs(Pixel0.x - Pixel1.x) + abs(Pixel0.y - Pixel1.y) + abs(Pixel0.z - Pixel1.z);
	}

}

Point m_sensor::get_position()
{
	return pos;
}

Size m_sensor::get_size()
{
	return Size(size, size);
}

inline short m_sensor::get_next_ring_value(ushort index, int8_t versatz) //HACK optimierung notwendig
{
	CV_Assert(index <= 256 && abs(versatz) < 127);

	int16_t n = index + versatz;

	if (n < 0) return values[n + POINTS_IN_CIRCLE - 1 + 1];
	if (n > POINTS_IN_CIRCLE - 1) return values[n - POINTS_IN_CIRCLE - 1];

	return values[n];
}

void m_sensor::smooth_values(uint8_t range)
{
	static short new_values[POINTS_IN_CIRCLE - 1];

	for (ushort k = 0; k < POINTS_IN_CIRCLE; k++)
	{
		int sum = 0;

		for (int8_t i = -range / 2; i <= range / 2; i++)
			sum += get_next_ring_value(k, i); //HACK need optimisation

		new_values[k] = sum / range;
	}

	for (ushort m = 0; m < POINTS_IN_CIRCLE; m++)	values[m] = new_values[m];

	return;

}

void m_sensor::show(const Mat * input, uint magnify)
{

	CV_Assert((*input).type() == out.type());

	Rect roi(pos.x, pos.y, size, size);

	(*input)(roi).copyTo(out);

	Mat out10x(size * magnify, size * magnify, out.type());

	soi(&out, &out10x, magnify);

	cout << key_points.size() << endl;

	for each (Point p in key_points)
		rectangle(out10x, Rect(p.x*magnify, p.y*magnify, magnify, magnify), Scalar(255));

	imshow("magnify", out);
}

void m_sensor::show(const Mat * input, const String fenster)
{

	//CV_Assert((*input).type() == out.type());

	Rect roi(pos.x, pos.y, size, size);

	(*input)(roi).copyTo(out);

	plot_graph("plot");


	cout << "keypoints: " << key_points.size() << " - nighbors: " << nighbors.size();

	cout << " sectors: " << (uint)sectors_nmb << endl;

	cout << " >  R   G   B  - start - end" << endl;

	for (int i = 0; i < sectors_nmb; i++)
	{
		cout << format(" > %3d %3d %3d - %2d - %2d"
			, sectors[i].color.x 
			, sectors[i].color.y 
			, sectors[i].color.z 
			, sectors[i].start
			, sectors[i].end) << endl;

		for (int k = sectors[i].start; k < sectors[i].end; k++)
		{
			out.at<Pixel>(dy[k] + size / 2, dx[k] + size / 2) = sectors[i].color;
		}

	}


	for each (Point p in key_points) circle(out, p, 0, Scalar(255, 0, 255));

	//Ringfarbe anzeigen
	//circle(out, Point(get_size() / 2), 8, Scalar(P1.x, P1.y, P1.z), -1);

	//Ringfarbe anzeigen
	//circle(out, Point(get_size() / 2), 4, Scalar(P2.x, P2.y, P2.z), -1);

	imshow(fenster, out);

}

void m_sensor::plot_graph(const String fenster)
{
	Mat xData, yData, display;
	Ptr<plot::Plot2d> plot, plot1;
	xData.create(1, POINTS_IN_CIRCLE - 1, CV_64F);//1 Row, 100 columns, Real
	yData.create(1, POINTS_IN_CIRCLE - 1, CV_64F);

	for (int i = 0; i < POINTS_IN_CIRCLE - 1; i++)
	{
		xData.at<double>(i) = i;
		yData.at<double>(i) = values[i];
	}
	plot = plot::createPlot2d(xData, yData);
	plot->setPlotSize(100, 160);
	plot->setMaxX(POINTS_IN_CIRCLE);
	plot->setMinX(0);
	plot->setMaxY(-80);
	plot->setMinY(80);
	plot->setPlotGridColor(Scalar(80, 80, 80));
	plot->render(display);
	imshow(fenster, display);
}

void m_sensor::mark_global(const Mat * input)
{

	for each (Point p in key_points)
		circle((*input), pos + p, 0, Scalar(255, 0, 0));
}

void m_sensor::add_points(vector<Point> * global_points)
{
	for each (Point p in key_points)
	{
		global_points->push_back(Point(pos + p));
	}
}

void m_sensor::soi(const Mat* src, Mat* dst, uint magnify)
{
	CV_Assert((*src).depth() == CV_8U && (*dst).depth() == CV_8U);  // accept only uchar images

	for (uint16_t i = 0; i < src->cols; i++)
		for (uint16_t j = 0; j < src->rows; j++)
			for (uint16_t ik = 0; ik < magnify; ik++)
				for (uint16_t jk = 0; jk < magnify; jk++)
				{
					dst->at<uint8_t>(i * magnify + ik, j * magnify + jk) = src->at<uint8_t>(i, j);
					//cout << i * 10 + ik << "," << j * 10 + jk << endl;
				}


}

bool m_sensor::cross(Point mp) //HACK Size beruecksichtigen, auf Rect aendern
{
	int s = (int)size;

	if (mp.x + s < pos.x) return false;
	if (mp.x > pos.x + s) return false;
	if (mp.y + s < pos.y) return false;
	if (mp.y > pos.y + s) return false;

	return true;
}

ushort m_sensor::get_distance_to_middle(int x, int y)
{
	return (ushort)sqrt((pos.x + size / 2 - x) ^ 2 + (pos.y + size / 2 - y) ^ 2);
}

Pixel m_sensor::get_color(int x, int y, const Mat * input)
{
	Pixel a = (*input).at<Pixel>(pos.y + y, pos.x + x);

	//circle((*input), Point(pos.x + x, pos.y + y), 6, Scalar(a.x, a.y, a.z), -1);

	return a;
}